import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import { generateTemplateHTML, getTemplateById } from '@/lib/website-templates';

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

export async function POST(
  request: NextRequest,
  context: { params: Promise<{ id: string }> }
) {
  try {
    const { id: kitId } = await context.params;
    const { templateId, customColors } = await request.json();

    if (!templateId) {
      return NextResponse.json(
        { error: 'Template ID is required' },
        { status: 400 }
      );
    }

    // Fetch kit data
    const { data: kit, error: kitError } = await supabase
      .from('kits')
      .select('*')
      .eq('id', kitId)
      .single();

    if (kitError || !kit) {
      return NextResponse.json(
        { error: 'Kit not found' },
        { status: 404 }
      );
    }

    // Fetch business case to get additional content
    const { data: outputs } = await supabase
      .from('outputs')
      .select('*')
      .eq('kit_id', kitId);

    const businessCase = outputs?.find(o => o.type === 'business_case');
    const businessCaseContent = businessCase ? JSON.parse(businessCase.content) : null;

    // Prepare content for template
    const content = {
      businessName: kit.title,
      tagline: businessCaseContent?.taglines?.[0] || kit.one_liner || 'Your business tagline',
      description: businessCaseContent?.positioning || kit.target_audience || 'Your business description',
      features: businessCaseContent?.offer_bullets || [
        'Quality Service',
        'Expert Team',
        'Customer Focused'
      ],
      ctaText: 'Get Started',
      ctaUrl: '#contact',
    };

    // Get template configuration
    const template = getTemplateById(templateId);
    if (!template) {
      return NextResponse.json(
        { error: 'Template not found' },
        { status: 404 }
      );
    }

    // Generate HTML with AI-populated content
    const htmlContent = generateTemplateHTML(
      templateId,
      content,
      customColors || template.defaultColors
    );

    // Generate basic CSS (can be enhanced)
    const cssContent = `/* Custom styles for ${kit.title} */\n/* Generated by LaunchKit AI */`;

    // Create sections configuration
    const sections = template.sections.map(section => ({
      id: section,
      type: section,
      visible: true,
      order: template.sections.indexOf(section),
    }));

    // Save website to database
    const { data: existingWebsite } = await supabase
      .from('websites')
      .select('id')
      .eq('kit_id', kitId)
      .eq('template_id', templateId)
      .single();

    let websiteData;

    if (existingWebsite) {
      // Update existing website
      const { data, error } = await (supabase
        .from('websites') as any)
        .update({
          html_content: htmlContent,
          css_content: cssContent,
          config: customColors || template.defaultColors,
          sections: sections,
          version: (existingWebsite.version || 0) + 1,
          updated_at: new Date().toISOString(),
        })
        .eq('id', existingWebsite.id)
        .select()
        .single();

      if (error) throw error;
      websiteData = data;
    } else {
      // Create new website
      const { data, error } = await (supabase
        .from('websites') as any)
        .insert({
          kit_id: kitId,
          template_id: templateId,
          template_source: template.source,
          html_content: htmlContent,
          css_content: cssContent,
          config: customColors || template.defaultColors,
          sections: sections,
        })
        .select()
        .single();

      if (error) throw error;
      websiteData = data;
    }

    return NextResponse.json({
      success: true,
      website: websiteData,
      previewUrl: `/kit/${kitId}/website/${websiteData.id}`,
    });

  } catch (error) {
    console.error('Website generation error:', error);
    
    // Provide more helpful error message
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    
    // Check if it's a database table error
    if (errorMessage.includes('relation "public.websites" does not exist')) {
      return NextResponse.json(
        { 
          error: 'Database not set up. Please run the migration: database/add_website_support.sql',
          details: 'The websites table does not exist. Run the SQL migration in Supabase.'
        },
        { status: 500 }
      );
    }
    
    return NextResponse.json(
      { 
        error: 'Failed to generate website',
        details: errorMessage 
      },
      { status: 500 }
    );
  }
}

// GET endpoint to fetch existing websites for a kit
export async function GET(
  request: NextRequest,
  context: { params: Promise<{ id: string }> }
) {
  try {
    const { id: kitId } = await context.params;

    const { data: websites, error } = await supabase
      .from('websites')
      .select('*')
      .eq('kit_id', kitId)
      .order('created_at', { ascending: false });

    if (error) throw error;

    return NextResponse.json({ websites: websites || [] });

  } catch (error) {
    console.error('Error fetching websites:', error);
    return NextResponse.json(
      { error: 'Failed to fetch websites' },
      { status: 500 }
    );
  }
}

